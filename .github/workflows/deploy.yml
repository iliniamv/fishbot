name: Deploy FishBot (self-hosted)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: [self-hosted, Windows, X64]
    defaults:
      run:
        shell: powershell

    env:
      FISHBOT_PROJECT_DIR: ${{ secrets.FISHBOT_PROJECT_DIR }}
      FISHBOT_SERVICE_NAME: ${{ secrets.FISHBOT_SERVICE_NAME }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show runner info
        run: |
          $PSVersionTable
          whoami
          Write-Host "PROJECT_DIR=$env:FISHBOT_PROJECT_DIR, SERVICE=$env:FISHBOT_SERVICE_NAME"

      - name: Ensure Python
        run: |
          if (-not (Get-Command python -ErrorAction SilentlyContinue)) {
            Write-Error "Python is required on the runner (add to PATH)."; exit 1
          }

      - name: Install deps (if requirements.txt)
        run: |
          if (Test-Path requirements.txt) {
            python -m pip install --upgrade pip
            python -m pip install -r requirements.txt
          } else {
            Write-Host "requirements.txt not found, skipping pip install."
          }

      - name: Smoke tests (import main)
        run: |
          $ErrorActionPreference = 'Stop'
          $cmd = Get-Command python -ErrorAction SilentlyContinue
          if (-not $cmd) { Write-Error 'Python not found in PATH'; exit 1 }
          $python = $cmd.Source
          $repo = (Get-Location).Path
          # подстраховка PYTHONPATH и рабочей директории
          if ($env:PYTHONPATH) { $env:PYTHONPATH = "$repo;$env:PYTHONPATH" } else { $env:PYTHONPATH = $repo }
          $env:PYTHONIOENCODING = 'utf-8'
          $py = @'
try:
    import main
    print("OK: imported main")
except Exception as e:
    print("FAIL: exception importing main:", e)
    raise
'@
          $temp = [System.IO.Path]::Combine($env:TEMP, "smoke_test_main.py")
          [System.IO.File]::WriteAllText($temp, $py, (New-Object System.Text.UTF8Encoding $false))
          $proc = Start-Process -FilePath $python -WorkingDirectory $repo -ArgumentList $temp -NoNewWindow -Wait -PassThru
          Remove-Item $temp -ErrorAction SilentlyContinue
          if ($proc.ExitCode -ne 0) { exit $proc.ExitCode }

      - name: Deploy + (soft) restart service
        run: |
          $ErrorActionPreference = 'Continue'
          $proj    = $env:FISHBOT_PROJECT_DIR
          $service = $env:FISHBOT_SERVICE_NAME
          if (-not $proj)    { Write-Error "FISHBOT_PROJECT_DIR is empty"; exit 1 }
          if (-not $service) { Write-Error "FISHBOT_SERVICE_NAME is empty"; exit 1 }
          Write-Host "Deploying to $proj, service $service"

          if (-not (Test-Path $proj)) { New-Item -ItemType Directory -Force -Path $proj | Out-Null }

          # Останавливаем службу (если есть)
          try {
            $svc = Get-Service -Name $service -ErrorAction Stop
            if ($svc.Status -ne 'Stopped') {
              Write-Host "Stopping service $service..."
              Stop-Service -Name $service -Force -ErrorAction Stop
              Start-Sleep -Seconds 2
            }
          } catch {
            Write-Warning "Could not stop service $service (it may not be running). $_"
          }

          # Копируем файлы из чекаута в папку проекта
          $src = (Get-Location).Path
          $opts = @(
            '/MIR','/FFT','/R:2','/W:2','/NP','/NFL','/NDL','/NJH','/NJS',
            '/XD','.git','.github','__pycache__','.venv','.pytest_cache','logs'
          )
          & robocopy $src $proj *.* $opts
          $rc = $LASTEXITCODE
          Write-Host "Robocopy exit code: $rc"
          if ($rc -gt 7) { Write-Error "Robocopy failed with code $rc"; exit 1 }

          # Запускаем службу
          try {
            Write-Host "Starting service $service..."
            Start-Service -Name $service -ErrorAction Stop
          } catch {
            Write-Warning "Start-Service failed. Trying 'sc start'..."
            try { & sc.exe start $service | Out-Null } catch { Write-Warning "Service $service not started." }
          }

          Write-Host "Deploy finished."
          exit 0
